// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: warehouse_connections.sql

package registry_database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWarehouseConnection = `-- name: CreateWarehouseConnection :one
INSERT INTO warehouse_connections (
    warehouse_id,
    api_key,
    name,
    status
    ) VALUES (
    $1, $2, $3, $4
) RETURNING id, warehouse_id, api_key, name, status, created_at, updated_at, last_used_at
`

type CreateWarehouseConnectionParams struct {
	WarehouseID string
	ApiKey      string
	Name        string
	Status      string
}

func (q *Queries) CreateWarehouseConnection(ctx context.Context, arg CreateWarehouseConnectionParams) (WarehouseConnection, error) {
	row := q.db.QueryRow(ctx, createWarehouseConnection,
		arg.WarehouseID,
		arg.ApiKey,
		arg.Name,
		arg.Status,
	)
	var i WarehouseConnection
	err := row.Scan(
		&i.ID,
		&i.WarehouseID,
		&i.ApiKey,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const getWarehouseConnectionByApiKey = `-- name: GetWarehouseConnectionByApiKey :one
SELECT id, warehouse_id, api_key, name, status, created_at, updated_at, last_used_at FROM warehouse_connections
WHERE api_key = $1
`

func (q *Queries) GetWarehouseConnectionByApiKey(ctx context.Context, apiKey string) (WarehouseConnection, error) {
	row := q.db.QueryRow(ctx, getWarehouseConnectionByApiKey, apiKey)
	var i WarehouseConnection
	err := row.Scan(
		&i.ID,
		&i.WarehouseID,
		&i.ApiKey,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const getWarehouseConnectionById = `-- name: GetWarehouseConnectionById :one
SELECT id, warehouse_id, api_key, name, status, created_at, updated_at, last_used_at FROM warehouse_connections
WHERE id = $1
`

func (q *Queries) GetWarehouseConnectionById(ctx context.Context, id int32) (WarehouseConnection, error) {
	row := q.db.QueryRow(ctx, getWarehouseConnectionById, id)
	var i WarehouseConnection
	err := row.Scan(
		&i.ID,
		&i.WarehouseID,
		&i.ApiKey,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const listWarehouseConnections = `-- name: ListWarehouseConnections :many
SELECT id, warehouse_id, api_key, name, status, created_at, updated_at, last_used_at FROM warehouse_connections
ORDER BY created_at DESC
LIMIT $2 OFFSET $1
`

type ListWarehouseConnectionsParams struct {
	ReturnOffset pgtype.Int4
	ReturnLimit  pgtype.Int4
}

func (q *Queries) ListWarehouseConnections(ctx context.Context, arg ListWarehouseConnectionsParams) ([]WarehouseConnection, error) {
	rows, err := q.db.Query(ctx, listWarehouseConnections, arg.ReturnOffset, arg.ReturnLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WarehouseConnection
	for rows.Next() {
		var i WarehouseConnection
		if err := rows.Scan(
			&i.ID,
			&i.WarehouseID,
			&i.ApiKey,
			&i.Name,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWarehouseConnectionsByStatus = `-- name: ListWarehouseConnectionsByStatus :many
SELECT id, warehouse_id, api_key, name, status, created_at, updated_at, last_used_at FROM warehouse_connections
WHERE status = $1
ORDER BY created_at DESC
LIMIT $3 OFFSET $2
`

type ListWarehouseConnectionsByStatusParams struct {
	Status       string
	ReturnOffset pgtype.Int4
	ReturnLimit  pgtype.Int4
}

func (q *Queries) ListWarehouseConnectionsByStatus(ctx context.Context, arg ListWarehouseConnectionsByStatusParams) ([]WarehouseConnection, error) {
	rows, err := q.db.Query(ctx, listWarehouseConnectionsByStatus, arg.Status, arg.ReturnOffset, arg.ReturnLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WarehouseConnection
	for rows.Next() {
		var i WarehouseConnection
		if err := rows.Scan(
			&i.ID,
			&i.WarehouseID,
			&i.ApiKey,
			&i.Name,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeWarehouseConnection = `-- name: RevokeWarehouseConnection :one
UPDATE warehouse_connections
SET 
    status = 'REVOKED',
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, warehouse_id, api_key, name, status, created_at, updated_at, last_used_at
`

func (q *Queries) RevokeWarehouseConnection(ctx context.Context, id int32) (WarehouseConnection, error) {
	row := q.db.QueryRow(ctx, revokeWarehouseConnection, id)
	var i WarehouseConnection
	err := row.Scan(
		&i.ID,
		&i.WarehouseID,
		&i.ApiKey,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const updateWarehouseConnection = `-- name: UpdateWarehouseConnection :one
UPDATE warehouse_connections
SET 
    updated_at = CURRENT_TIMESTAMP,
    warehouse_id = COALESCE($1, warehouse_id),
    api_key = COALESCE($2, api_key), 
    name = COALESCE($3, name),
    status = COALESCE($4, status),
    last_used_at = COALESCE($5, last_used_at)
WHERE id = $6
RETURNING id, warehouse_id, api_key, name, status, created_at, updated_at, last_used_at
`

type UpdateWarehouseConnectionParams struct {
	WarehouseID string
	ApiKey      string
	Name        string
	Status      string
	LastUsedAt  pgtype.Timestamp
	ID          int32
}

func (q *Queries) UpdateWarehouseConnection(ctx context.Context, arg UpdateWarehouseConnectionParams) (WarehouseConnection, error) {
	row := q.db.QueryRow(ctx, updateWarehouseConnection,
		arg.WarehouseID,
		arg.ApiKey,
		arg.Name,
		arg.Status,
		arg.LastUsedAt,
		arg.ID,
	)
	var i WarehouseConnection
	err := row.Scan(
		&i.ID,
		&i.WarehouseID,
		&i.ApiKey,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastUsedAt,
	)
	return i, err
}
